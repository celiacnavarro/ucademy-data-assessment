window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.campaign_source_analysis", "modulename": "src.campaign_source_analysis", "kind": "module", "doc": "<p>Campaign Source Analysis - Objetivo 1</p>\n\n<p>An\u00e1lisis de conversi\u00f3n y rendimiento por fuente de campa\u00f1a.</p>\n\n<p>Este script realiza:</p>\n\n<ul>\n<li>Conexi\u00f3n a una base de datos SQLite preprocesada (marketing_analysis.db).</li>\n<li>Ejecuci\u00f3n de queries para obtener m\u00e9tricas por canal y tipo de curso.</li>\n<li>Guardado de resultados en CSV.</li>\n<li>Creaci\u00f3n de visualizaciones (barras, heatmaps y scatter plots) para an\u00e1lisis.</li>\n<li>Guardado de gr\u00e1ficos resultantes.</li>\n</ul>\n\n<p>Dependencia:</p>\n\n<ul>\n<li>data_preprocessing.py debe ejecutarse antes para generar la base de datos.</li>\n</ul>\n\n<p>Outputs:</p>\n\n<ul>\n<li>CSVs con resultados de queries.</li>\n<li>PNGs con visualizaciones.</li>\n<li>TXT con resumen ejecutivo para stakeholders.</li>\n</ul>\n"}, {"fullname": "src.campaign_source_analysis.setup_paths", "modulename": "src.campaign_source_analysis", "qualname": "setup_paths", "kind": "function", "doc": "<p>Configura y crea las rutas necesarias para el proyecto.</p>\n\n<p>Retorna:\n    db_path (str): Ruta al archivo de base de datos SQLite.\n    analysis_output_path (str): Ruta donde se guardar\u00e1n los resultados del an\u00e1lisis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.connect_to_database", "modulename": "src.campaign_source_analysis", "qualname": "connect_to_database", "kind": "function", "doc": "<p>Conecta a la base de datos SQLite.</p>\n\n<p>Par\u00e1metros:\n    db_path (str): Ruta al archivo de base de datos.</p>\n\n<p>Retorna:\n    sqlite3.Connection: Objeto de conexi\u00f3n a la base de datos.</p>\n\n<p>Notas:\nEsta funci\u00f3n puede lanzar FileNotFoundError si la base de datos indicada no existe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.execute_queries", "modulename": "src.campaign_source_analysis", "qualname": "execute_queries", "kind": "function", "doc": "<p>Ejecuta consultas SQL para obtener m\u00e9tricas clave por canal y curso.</p>\n\n<p>Par\u00e1metros:\n    conn (sqlite3.Connection): Conexi\u00f3n activa a la base de datos.</p>\n\n<p>Retorna:\n    tuple: DataFrames con m\u00e9tricas por canal, por curso y datos detallados.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.save_results_to_csv", "modulename": "src.campaign_source_analysis", "qualname": "save_results_to_csv", "kind": "function", "doc": "<p>Guarda los resultados en CSV con marca temporal.</p>\n\n<p>Par\u00e1metros:\n    df_channel (pandas.DataFrame): M\u00e9tricas por canal.\n    df_course (pandas.DataFrame): M\u00e9tricas por curso.\n    output_path (str): Ruta para guardar los CSV.</p>\n\n<p>Retorna:\n    str: Marca temporal usada en los nombres de archivo.</p>\n\n<p>Notas:\nGenera archivos CSV con sufijo de timestamp en la carpeta de salida.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_channel</span>, </span><span class=\"param\"><span class=\"n\">df_course</span>, </span><span class=\"param\"><span class=\"n\">output_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.configure_plot_style", "modulename": "src.campaign_source_analysis", "qualname": "configure_plot_style", "kind": "function", "doc": "<p>Configura el estilo visual global para las gr\u00e1ficas (Matplotlib + Seaborn).</p>\n\n<p>Ajusta colores, tama\u00f1os de fuente y par\u00e1metros por defecto \npara mejorar la legibilidad de los gr\u00e1ficos.</p>\n\n<p>Retorna: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.create_conversion_analysis", "modulename": "src.campaign_source_analysis", "qualname": "create_conversion_analysis", "kind": "function", "doc": "<p>Crea visualizaciones gr\u00e1ficas del an\u00e1lisis de conversi\u00f3n.</p>\n\n<p>Par\u00e1metros:</p>\n\n<ul>\n<li>df_channel (pandas.DataFrame): Datos agregados por canal.</li>\n<li>df_course (pandas.DataFrame): Datos agregados por tipo de curso.</li>\n<li>df_detailed (pandas.DataFrame): Datos detallados con canal, tipo de curso y tasa de conversi\u00f3n.</li>\n<li>output_path (str): Carpeta donde guardar el gr\u00e1fico.</li>\n<li>timestamp (str): Sufijo para el archivo de salida, normalmente fecha/hora.</li>\n</ul>\n\n<p>Acciones:</p>\n\n<ul>\n<li>Genera dos visualizaciones lado a lado:\n<ol>\n<li>Gr\u00e1fico de barras agrupadas de tasa de conversi\u00f3n por canal y tipo de curso.</li>\n<li>Mapa de calor de la tasa de conversi\u00f3n.</li>\n</ol></li>\n<li>Guarda el gr\u00e1fico como PNG.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_channel</span>, </span><span class=\"param\"><span class=\"n\">df_course</span>, </span><span class=\"param\"><span class=\"n\">df_detailed</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.create_performance_analysis", "modulename": "src.campaign_source_analysis", "qualname": "create_performance_analysis", "kind": "function", "doc": "<p>Crea visualizaciones gr\u00e1ficas del an\u00e1lisis de rendimiento.</p>\n\n<p>Par\u00e1metros:</p>\n\n<ul>\n<li>df_channel (pandas.DataFrame): Datos agregados por canal con m\u00e9tricas de CPA, ROI, etc.</li>\n<li>output_path (str): Carpeta donde guardar el gr\u00e1fico.</li>\n<li>timestamp (str): Sufijo para el archivo de salida.</li>\n</ul>\n\n<p>Acciones:</p>\n\n<ul>\n<li>Genera dos visualizaciones:\n<ol>\n<li>Gr\u00e1fico de dispersi\u00f3n (CPA vs ROI) con tama\u00f1o de burbuja seg\u00fan volumen de leads.</li>\n<li>Matriz estrat\u00e9gica tipo BCG.</li>\n</ol></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_channel</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.generate_executive_summary", "modulename": "src.campaign_source_analysis", "qualname": "generate_executive_summary", "kind": "function", "doc": "<p>Genera un resumen ejecutivo del rendimiento de las campa\u00f1as y lo guarda como archivo .txt.</p>\n\n<p>Par\u00e1metros:\ndf_channel : pandas.DataFrame\n    DataFrame con m\u00e9tricas por canal de adquisici\u00f3n.\n    Debe contener columnas: 'total_leads', 'total_inscriptions', 'Costo_Total', \n    'Ingresos_Total', 'Tasa_Conversion_Pct', 'ROI_Pct', 'channel'.</p>\n\n<p>df_course : pandas.DataFrame\n    DataFrame con m\u00e9tricas por tipo de curso.\n    Debe contener columnas: 'Tasa_Conversion_Pct', 'course_type'.</p>\n\n<p>output_path : str\n    Ruta del directorio donde se guardar\u00e1 el archivo de resumen.</p>\n\n<p>timestamp : str\n    Sufijo temporal para nombrar el archivo de salida.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_channel</span>, </span><span class=\"param\"><span class=\"n\">df_course</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.display_results_summary", "modulename": "src.campaign_source_analysis", "qualname": "display_results_summary", "kind": "function", "doc": "<p>Muestra en consola un resumen de resultados por canal y por tipo de curso.</p>\n\n<p>Par\u00e1metros:\ndf_channel : pandas.DataFrame\n    DataFrame con m\u00e9tricas por canal de adquisici\u00f3n.</p>\n\n<p>df_course : pandas.DataFrame\n    DataFrame con m\u00e9tricas por tipo de curso.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_channel</span>, </span><span class=\"param\"><span class=\"n\">df_course</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.campaign_source_analysis.main", "modulename": "src.campaign_source_analysis", "qualname": "main", "kind": "function", "doc": "<p>Funci\u00f3n principal del an\u00e1lisis de fuentes de campa\u00f1a - Objetivo 1.\nEjecuta el flujo completo:</p>\n\n<ol>\n<li>Configuraci\u00f3n de rutas.</li>\n<li>Conexi\u00f3n a base de datos.</li>\n<li>Ejecuci\u00f3n de queries.</li>\n<li>Guardado de resultados en CSV.</li>\n<li>Muestra de resumen de resultados.</li>\n<li>Configuraci\u00f3n de estilo gr\u00e1fico.</li>\n<li>Creaci\u00f3n de visualizaciones.</li>\n<li>Generaci\u00f3n de resumen ejecutivo.</li>\n<li>Cierre de conexi\u00f3n.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing", "modulename": "src.data_preprocessing", "kind": "module", "doc": "<p>Script de Preprocesamiento de Datos de Marketing</p>\n\n<p>Este script limpia y prepara datos de marketing (campa\u00f1as, inscripciones y leads) para su an\u00e1lisis posterior.\nGenera:</p>\n\n<ul>\n<li>Datos limpios.</li>\n<li>Estad\u00edsticas resumen.</li>\n<li>Una base de datos SQLite reutilizable.</li>\n<li>Archivos CSV de respaldo.</li>\n<li>Un reporte en formato JSON y TXT con estad\u00edsticas.</li>\n</ul>\n\n<p>Estructura:</p>\n\n<ol>\n<li>Configuraci\u00f3n de rutas.</li>\n<li>Carga de datos originales.</li>\n<li>Limpieza y transformaci\u00f3n.</li>\n<li>Categorizaci\u00f3n de fuentes de leads.</li>\n<li>Creaci\u00f3n de estad\u00edsticas resumen.</li>\n<li>Guardado en base de datos y archivos.</li>\n</ol>\n\n<p>Outputs:</p>\n\n<ul>\n<li>CSVs con los datos preprocesados. </li>\n<li>Base de datos 'marketing_analysis.db'</li>\n<li>JSON y TXT con resumen exploratorio de los datos.</li>\n</ul>\n"}, {"fullname": "src.data_preprocessing.setup_paths", "modulename": "src.data_preprocessing", "qualname": "setup_paths", "kind": "function", "doc": "<p>Configura las rutas necesarias para el procesamiento.</p>\n\n<p>Retorna:\n    data_path (str): Ruta donde est\u00e1n los datos originales.\n    processed_data_path (str): Ruta donde se guardar\u00e1n datos procesados.\n    db_path (str): Ruta del archivo SQLite que contendr\u00e1 los datos limpios.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.load_raw_data", "modulename": "src.data_preprocessing", "qualname": "load_raw_data", "kind": "function", "doc": "<p>Carga los datos JSON originales desde la ruta especificada.</p>\n\n<p>Par\u00e1metros:\n    data_path (str): Ruta donde se encuentran los archivos JSON.</p>\n\n<p>Retorna:\n    campaigns (pandas.DataFrame): Datos de campa\u00f1as.\n    inscriptions (pandas.DataFrame): Datos de inscripciones.\n    leads (pandas.DataFrame): Datos de leads.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.clean_financial_data", "modulename": "src.data_preprocessing", "qualname": "clean_financial_data", "kind": "function", "doc": "<p>Limpia columnas financieras eliminando s\u00edmbolos (\u20ac) y convirtiendo comas a puntos.\nConvierte el resultado a tipo float.</p>\n\n<p>Par\u00e1metros:\n    df (pandas.DataFrame): DataFrame que contiene la columna.\n    column (str): Nombre de la columna a limpiar.</p>\n\n<p>Retorna:\n    Series (float): Columna limpia y convertida a float.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.clean_campaigns", "modulename": "src.data_preprocessing", "qualname": "clean_campaigns", "kind": "function", "doc": "<p>Limpia y transforma la tabla de campa\u00f1as.</p>\n\n<p>Transformaciones:</p>\n\n<ul>\n<li>Limpia costos financieros.</li>\n<li>Normaliza texto.</li>\n<li>Extrae tipo de curso y canal desde el nombre.</li>\n<li>Convierte fechas a datetime.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    campaigns (pandas.DataFrame): Tabla original de campa\u00f1as.</p>\n\n<p>Retorna:\n    campaigns (pandas.DataFrame): Tabla limpia y transformada.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">campaigns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.clean_inscriptions", "modulename": "src.data_preprocessing", "qualname": "clean_inscriptions", "kind": "function", "doc": "<p>Limpia y transforma la tabla de inscripciones.</p>\n\n<p>Transformaciones:</p>\n\n<ul>\n<li>Limpia montos financieros.</li>\n<li>Convierte fechas a datetime.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    inscriptions (pandas.DataFrame): Tabla original de inscripciones.</p>\n\n<p>Retorna:\n    inscriptions (pandas.DataFrame): Tabla limpia y transformada.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inscriptions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.clean_leads", "modulename": "src.data_preprocessing", "qualname": "clean_leads", "kind": "function", "doc": "<p>Limpia y transforma la tabla de leads.</p>\n\n<p>Transformaciones:</p>\n\n<ul>\n<li>Normaliza canales de entrada.</li>\n<li>Convierte fechas a datetime.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    leads (pandas.DataFrame): Tabla original de leads.</p>\n\n<p>Retorna:\n    leads (pandas.DataFrame): Tabla limpia y transformada.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">leads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.categorize_all_lead_sources", "modulename": "src.data_preprocessing", "qualname": "categorize_all_lead_sources", "kind": "function", "doc": "<p>Categorizaci\u00f3n de leads seg\u00fan su fuente.</p>\n\n<p>Clasificaci\u00f3n:</p>\n\n<ul>\n<li>paid_campaign: proveniente de una campa\u00f1a pagada.</li>\n<li>organic: proveniente de b\u00fasqueda org\u00e1nica.</li>\n<li>partner: proveniente de partners/referrals.</li>\n<li>other: cualquier otro caso.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    leads (pandas.DataFrame): Tabla de leads.\n    campaigns (pandas.DataFrame): Tabla de campa\u00f1as limpias.</p>\n\n<p>Retorna:\n    leads (pandas.DataFrame): Leads con columnas adicionales de categorizaci\u00f3n.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">leads</span>, </span><span class=\"param\"><span class=\"n\">campaigns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.create_summary_stats", "modulename": "src.data_preprocessing", "qualname": "create_summary_stats", "kind": "function", "doc": "<p>Genera estad\u00edsticas generales de los datos procesados.</p>\n\n<p>Par\u00e1metros:\n    campaigns (pandas.DataFrame): Campa\u00f1as limpias.\n    leads (pandas.DataFrame): Leads limpios.\n    inscriptions (pandas.DataFrame): Inscripciones limpias.</p>\n\n<p>Retorna:\n    stats (dict): Estad\u00edsticas resumidas.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">campaigns</span>, </span><span class=\"param\"><span class=\"n\">leads</span>, </span><span class=\"param\"><span class=\"n\">inscriptions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.save_to_database", "modulename": "src.data_preprocessing", "qualname": "save_to_database", "kind": "function", "doc": "<p>Guarda los DataFrames limpios en una base de datos SQLite.</p>\n\n<p>Este procedimiento persiste las tablas procesadas en un fichero SQLite para\nfacilitar consultas posteriores desde los scripts de an\u00e1lisis. Las tablas se\nsobrescriben en cada ejecuci\u00f3n (if_exists=\"replace\").</p>\n\n<p>Par\u00e1metros:\n    campaigns (pandas.DataFrame): DataFrame con la tabla <code>campaigns</code> ya limpiada.\n    leads (pandas.DataFrame): DataFrame con la tabla <code>leads</code> ya limpiada.\n    inscriptions (pandas.DataFrame): DataFrame con la tabla <code>inscriptions</code> ya limpiada.\n    db_path (str): Ruta completa al fichero de base de datos SQLite donde se guardar\u00e1n las tablas.</p>\n\n<p>Retorna:\n    None</p>\n\n<p>Notas:\nSobrescribe las tablas 'campaigns', 'leads' e 'inscriptions' en la base de datos SQLite.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">campaigns</span>, </span><span class=\"param\"><span class=\"n\">leads</span>, </span><span class=\"param\"><span class=\"n\">inscriptions</span>, </span><span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.save_processed_csvs", "modulename": "src.data_preprocessing", "qualname": "save_processed_csvs", "kind": "function", "doc": "<p>Guarda copias de seguridad en CSV de los datos procesados.</p>\n\n<p>Par\u00e1metros:\n    campaigns (pandas.DataFrame): Datos de campa\u00f1as procesados.\n    leads (pandas.DataFrame): Datos de leads procesados.\n    inscriptions (pandas.DataFrame): Datos de inscripciones procesados.\n    processed_data_path (str): Carpeta donde se guardar\u00e1n los CSVs.</p>\n\n<p>Retorna:\n    None</p>\n\n<p>Notas:\nGenera 3 archivos CSV con timestamp en el directorio de salida.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">campaigns</span>, </span><span class=\"param\"><span class=\"n\">leads</span>, </span><span class=\"param\"><span class=\"n\">inscriptions</span>, </span><span class=\"param\"><span class=\"n\">processed_data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.save_summary_report", "modulename": "src.data_preprocessing", "qualname": "save_summary_report", "kind": "function", "doc": "<p>Guarda un reporte resumen del procesamiento de datos.</p>\n\n<p>Par\u00e1metros:\nstats : dict\n    Diccionario con estad\u00edsticas y m\u00e9tricas generadas durante el procesamiento.\n    Debe contener al menos:\n        - 'processing_date': str, fecha del procesamiento.\n        - 'data_overview': dict con totales y rangos de fechas.\n        - 'lead_sources': dict con conteos por fuente de lead.\n        - 'campaign_channels': dict con conteos por canal.\n        - 'course_types': dict con conteos por tipo de curso.\nprocessed_data_path : str\n    Ruta donde se guardar\u00e1n los reportes generados.</p>\n\n<p>Retorna:\nreport : str\n    Texto del reporte generado, \u00fatil para imprimir en consola.</p>\n\n<p>Notas:\nGenera dos archivos en processed_data_path:</p>\n\n<ul>\n<li>data_summary_<timestamp>.json</li>\n<li>data_summary_<timestamp>.txt</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span>, </span><span class=\"param\"><span class=\"n\">processed_data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocessing.main", "modulename": "src.data_preprocessing", "qualname": "main", "kind": "function", "doc": "<p>Funci\u00f3n principal de preprocesamiento de datos.</p>\n\n<p>Flujo de trabajo:</p>\n\n<ol>\n<li>Configura rutas de datos.</li>\n<li>Carga datasets originales: campa\u00f1as, inscripciones, leads.</li>\n<li>Limpia los datos cargados.</li>\n<li>Categoriza leads seg\u00fan canal de origen.</li>\n<li>Crea estad\u00edsticas resumen.</li>\n<li>Guarda datos en base de datos.</li>\n<li>Guarda copias procesadas en CSV.</li>\n<li>Genera y guarda reporte resumen.</li>\n</ol>\n\n<p>Retorna:\ndb_path : str\n    Ruta donde se guard\u00f3 la base de datos procesada.\nprocessed_data_path : str\n    Ruta donde se guardaron los datos procesados y reportes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis", "modulename": "src.lead_conversion_funnel_analysis", "kind": "module", "doc": "<p>Lead Conversion Funnel Analysis - Objetivo 2</p>\n\n<p>Este script realiza un an\u00e1lisis detallado del embudo de conversi\u00f3n de leads a inscripciones,\nutilizando los datos preprocesados por <code>data_preprocessing.py</code>.</p>\n\n<p>Funcionalidades principales:</p>\n\n<ul>\n<li>Carga de datos desde SQLite (base generada por el preprocesamiento).</li>\n<li>An\u00e1lisis del embudo de conversi\u00f3n por fuente de leads y campa\u00f1as.</li>\n<li>An\u00e1lisis temporal (evoluci\u00f3n semanal de leads, inscripciones y conversi\u00f3n).</li>\n<li>An\u00e1lisis de calidad de leads y eficiencia de campa\u00f1as.</li>\n<li>Visualizaciones interactivas (Plotly) y est\u00e1ticas (Matplotlib/Seaborn).</li>\n<li>Generaci\u00f3n de outputs en formato CSV, PNG y TXT (resumen ejecutivo).</li>\n</ul>\n\n<p>Dependencia:</p>\n\n<ul>\n<li>data_preprocessing.py debe ejecutarse antes para generar la base de datos.</li>\n</ul>\n\n<p>Outputs:</p>\n\n<ul>\n<li>CSVs con resultados de queries.</li>\n<li>PNGs con visualizaciones.</li>\n<li>TXT con resumen ejecutivo para stakeholders.</li>\n</ul>\n"}, {"fullname": "src.lead_conversion_funnel_analysis.setup_paths", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "setup_paths", "kind": "function", "doc": "<p>Configura las rutas de entrada y salida del proyecto.</p>\n\n<p>Retorna:\n    tuple: \n        - db_path (str): Ruta a la base de datos SQLite procesada.\n        - analysis_output_path (str): Carpeta donde se guardar\u00e1n los resultados.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.connect_to_database", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "connect_to_database", "kind": "function", "doc": "<p>Conecta a la base de datos SQLite.</p>\n\n<p>Par\u00e1metros:\n    db_path (str): Ruta de la base de datos SQLite.</p>\n\n<p>Retorna:\n    sqlite3.Connection: Objeto de conexi\u00f3n.</p>\n\n<p>Notas:\nEsta funci\u00f3n puede lanzar FileNotFoundError si la base de datos indicada no existe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.execute_funnel_queries", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "execute_funnel_queries", "kind": "function", "doc": "<p>Ejecuta queries SQL para obtener diferentes perspectivas del embudo:</p>\n\n<ul>\n<li>Conversi\u00f3n por fuente de leads.</li>\n<li>Rendimiento por campa\u00f1a.</li>\n<li>Evoluci\u00f3n temporal semanal.</li>\n<li>Calidad de leads.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    conn (sqlite3.Connection): Conexi\u00f3n a la base de datos.</p>\n\n<p>Retorna:\n    tuple: \n        - df_funnel (DataFrame)\n        - df_campaigns (DataFrame)\n        - df_temporal (DataFrame)\n        - df_quality (DataFrame)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.save_results_to_csv", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "save_results_to_csv", "kind": "function", "doc": "<p>Guarda los resultados de los an\u00e1lisis en archivos CSV con un timestamp \u00fanico.</p>\n\n<p>Par\u00e1metros:\n    df_funnel (pd.DataFrame): Resultados del an\u00e1lisis del embudo.\n    df_campaigns (pd.DataFrame): Resultados del an\u00e1lisis por campa\u00f1as.\n    df_temporal (pd.DataFrame): Resultados del an\u00e1lisis temporal (evoluci\u00f3n semanal).\n    df_quality (pd.DataFrame): Resultados del an\u00e1lisis de calidad de leads.\n    output_path (str): Carpeta donde se guardar\u00e1n los archivos.</p>\n\n<p>Retorna:\n    str: Timestamp utilizado para nombrar los archivos exportados.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_funnel</span>, </span><span class=\"param\"><span class=\"n\">df_campaigns</span>, </span><span class=\"param\"><span class=\"n\">df_temporal</span>, </span><span class=\"param\"><span class=\"n\">df_quality</span>, </span><span class=\"param\"><span class=\"n\">output_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.configure_plot_style", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "configure_plot_style", "kind": "function", "doc": "<p>Configura el estilo visual global para las gr\u00e1ficas (Matplotlib + Seaborn).</p>\n\n<p>Ajusta colores, tama\u00f1os de fuente y par\u00e1metros por defecto \npara mejorar la legibilidad de los gr\u00e1ficos.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.create_funnel_visualization", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "create_funnel_visualization", "kind": "function", "doc": "<p>Genera visualizaciones del embudo de conversi\u00f3n a partir del DataFrame <code>df_funnel</code>.</p>\n\n<ul>\n<li>Embudos individuales por fuente de leads (Plotly).</li>\n<li>Comparativa de volumen y tasa de conversi\u00f3n (Matplotlib).</li>\n</ul>\n\n<p>Par\u00e1metros:\n    df_funnel (pd.DataFrame): Resultados de conversi\u00f3n por fuente de leads.\n    output_path (str): Carpeta donde guardar las im\u00e1genes.\n    timestamp (str): Identificador \u00fanico de la ejecuci\u00f3n.</p>\n\n<p>Retorna:\n    - Imagen PNG con embudos por fuente (funnel_by_source).\n    - Imagen PNG con comparativa (funnel_comparison).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_funnel</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.create_temporal_analysis", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "create_temporal_analysis", "kind": "function", "doc": "<p>Crear an\u00e1lisis temporal de leads e inscripciones semanales.</p>\n\n<p>Par\u00e1metros:\ndf_temporal : pd.DataFrame\n    DataFrame con m\u00e9tricas semanales por fuente:\n    - week_start\n    - source_group\n    - weekly_leads\n    - weekly_inscriptions\n    - weekly_conversion_rate\noutput_path : str\n    Carpeta donde guardar los resultados.\ntimestamp : str\n    Marca de tiempo usada en el nombre del archivo de salida.</p>\n\n<p>Retorna:</p>\n\n<ul>\n<li>Gr\u00e1fico PNG con 4 paneles:\n<ol>\n<li>Evoluci\u00f3n de leads por fuente.</li>\n<li>Evoluci\u00f3n de inscripciones por fuente.</li>\n<li>Evoluci\u00f3n de la tasa de conversi\u00f3n por fuente.</li>\n<li>Eficiencia global del embudo (inscripciones/leads).</li>\n</ol></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_temporal</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.create_campaign_performance_analysis", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "create_campaign_performance_analysis", "kind": "function", "doc": "<p>Crear an\u00e1lisis de rendimiento de campa\u00f1as individuales.</p>\n\n<p>Par\u00e1metros:\ndf_campaigns : pd.DataFrame\n    DataFrame con m\u00e9tricas de campa\u00f1a:\n    - total_leads\n    - total_inscriptions\n    - conversion_rate\n    - campaign_cost\n    - total_revenue\n    - channel\n    - course_type\noutput_path : str\n    Carpeta donde guardar los resultados.\ntimestamp : str\n    Marca de tiempo usada en el nombre del archivo.</p>\n\n<p>Retorna:\n    - Gr\u00e1fico PNG con:\n    1. Bubble chart: Conversi\u00f3n vs Volumen (color = ROI, tama\u00f1o = volumen).\n    2. Ranking de campa\u00f1as por tasa de conversi\u00f3n.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_campaigns</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.generate_executive_summary", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "generate_executive_summary", "kind": "function", "doc": "<p>Generar resumen ejecutivo del an\u00e1lisis de embudo</p>\n\n<p>Este m\u00f3dulo toma los resultados de los an\u00e1lisis previos y genera\nun reporte ejecutivo en formato de texto, que resume las m\u00e9tricas clave:</p>\n\n<ul>\n<li>Totales globales del embudo (leads, inscripciones, conversi\u00f3n).</li>\n<li>Identificaci\u00f3n de la mejor y peor fuente de leads.</li>\n<li>Campa\u00f1a con mejor rendimiento (si hay datos).</li>\n<li>Evoluci\u00f3n temporal de la conversi\u00f3n (tendencia).</li>\n<li>Recomendaciones estrat\u00e9gicas de optimizaci\u00f3n.</li>\n</ul>\n\n<p>Par\u00e1metros:\n    df_funnel (pd.DataFrame): Resultados del embudo por fuente.\n    df_campaigns (pd.DataFrame): Resultados de campa\u00f1as.\n    df_temporal (pd.DataFrame): Evoluci\u00f3n temporal de leads/inscripciones.\n    output_path (str): Carpeta donde guardar los resultados.\n    timestamp (str): Marca de tiempo \u00fanica del an\u00e1lisis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_funnel</span>, </span><span class=\"param\"><span class=\"n\">df_campaigns</span>, </span><span class=\"param\"><span class=\"n\">df_temporal</span>, </span><span class=\"param\"><span class=\"n\">output_path</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.display_results_summary", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "display_results_summary", "kind": "function", "doc": "<p>Mostrar resumen de resultados en consola</p>\n\n<p>Se imprimen los principales resultados del an\u00e1lisis:</p>\n\n<ul>\n<li>Embudo de conversi\u00f3n por fuente.</li>\n<li>Top 10 campa\u00f1as ordenadas por conversi\u00f3n (si hay datos disponibles).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_funnel</span>, </span><span class=\"param\"><span class=\"n\">df_campaigns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lead_conversion_funnel_analysis.main", "modulename": "src.lead_conversion_funnel_analysis", "qualname": "main", "kind": "function", "doc": "<p>Funci\u00f3n principal del an\u00e1lisis de embudo de conversi\u00f3n</p>\n\n<p>Flujo completo del script:</p>\n\n<ol>\n<li>Configurar rutas de trabajo.</li>\n<li>Conectar a la base de datos SQLite.</li>\n<li>Ejecutar queries y obtener resultados.</li>\n<li>Guardar resultados en CSV.</li>\n<li>Mostrar resumen de resultados en consola.</li>\n<li>Configurar estilo de visualizaciones.</li>\n<li>Crear visualizaciones del embudo de conversi\u00f3n.</li>\n<li>Crear an\u00e1lisis temporal.</li>\n<li>Crear an\u00e1lisis de rendimiento por campa\u00f1a.</li>\n<li>Generar resumen ejecutivo.</li>\n<li>Cerrar conexi\u00f3n a la base de datos.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();